#!/usr/bin/env python
import AnimeNFO
import Growl
import time
import logging
import daemon
import optparse
import os

class Parser(optparse.OptionParser):
	def __init__(self):
		optparse.OptionParser.__init__(self,usage="%prog [options] (start|stop|restart)")
		def store_path(option,opt,value,parser):
			setattr(parser.values, option.dest, os.path.realpath(value))
		self.add_option('-d','--daemon',dest='daemon',default=False,action='store_true')
		self.add_option('-p','--pid',dest='pid',default=os.path.realpath('./radio.pid'),
			action='callback',callback=store_path,type=str)
		self.add_option('-l','--log',dest='log',default=os.path.realpath('./radio.log'),
			action='callback',callback=store_path,type=str)
		self.add_option('-v','--verbose',dest='verbose',default=logging.INFO,
			action='store_const',const=logging.DEBUG)

class Radio(daemon.Daemon):
	def run(self,loop=True):
		def to_seconds(time):
			try:
				time = time.split(':')
				return 60*int(time[0]) + int(time[1])
			except:
				return 20
		def now_playing():
			while(1):
				try:
					return AnimeNFO.now_playing()
				except IOError:
					logging.debug('Timeout.  Sleeping for 20')
					time.sleep(20)
		growl = Growl.GrowlNotifier()
		growl.register()
		previous = ''
		while(True):
			playing = now_playing()
			title = u'%s - %s - %s'%(playing.title,playing.artist,playing.album)
			if title != previous:
				message = u'[%s/%s]  Rating:[%s/10]'%(
							playing.duration[0],
							playing.duration[1],
							playing.rating
						)
				logging.info('%s %s',title,message)
				growl.alert(title,message,playing.image)
			if not loop: break
			time_left = to_seconds(playing.duration[0])
			logging.debug('Sleeping for %d',time_left)
			time.sleep(time_left+5)

(options, args) = Parser().parse_args()
radio = Radio(options.pid)

try: 
	import setproctitle
	setproctitle.setproctitle('radio-growl')
except ImportError:
	pass

if 'start' in args:
	logging.basicConfig(level=options.verbose,filename=options.log)
	radio.start()
elif 'restart' in args:
	logging.basicConfig(level=options.verbose,filename=options.log)
	radio.restart()
elif 'stop' in args:
	radio.stop()
else:
	logging.basicConfig(level=options.verbose)
	radio.run(False)

